using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;

namespace Test20311M
{
    class RawProgTask : IReadDisplay
    {
        private static RawProgTask instance = null;
        private MainWindow wnd;
        private PortModel portModel;
        private Task task = null;
        private CancellationTokenSource tokenSrc = null;
        List<byte[]> progData;
        volatile private byte[] data;
        volatile private int count;

        private RawProgTask() {}

        public static RawProgTask GetInstance()
        {
            if (instance == null) { instance = new RawProgTask(); }
            return instance;
        }

        public void Run(MainWindow wnd, PortModel portModel, List<byte[]> progData)
        {
            this.wnd = wnd;
            this.portModel = portModel;
            this.progData = progData;

            tokenSrc = new CancellationTokenSource();
            task = Task.Factory.StartNew(TaskFunc, tokenSrc.Token, tokenSrc.Token);
        }

        private void TaskFunc(object ct)
        {
            CancellationToken cancelTok = (CancellationToken)ct;

            int baudRate = 115200;

            try
            {
                portModel.StopCyclicWrite();
                baudRate = portModel.BaudRate;

                //------------------------------| СИНХРОНИЗАЦИЯ |------------------------------//
                portModel.BaudRate = 9600;

                ProgressWindow.ShowProgressWnd(wnd, "Перепрогр. МК", "Синхронизация...", null, () => { if (tokenSrc != null) { tokenSrc.Cancel(); } });

                byte[] BufWr = new byte[1] { 0 };

                for (int i = 0; i < 1000; ++i )
                {
                    portModel.WriteAndRead(BufWr, 2, this, 20, false);
                    if (cancelTok.IsCancellationRequested) return;
                    if (count > 0) break;
                }

                if (cancelTok.IsCancellationRequested) return;
                if(count <= 0)
                {
                    throw new Exception("Ошибка синхронизации.\nНет ответа от МК");
                }
                else if((count != 3) || (data[0] != 0x0D) || (data[1] != 0x0A) || (data[2] != 0x3E))
                {
                    throw new Exception("Ошибка синхронизации.\nПолучен неверный ответ от МК");
                }

                //------------------------------| ИЗМЕНЕНИЕ СКОРОСТИ |------------------------------//

                ProgressWindow.SetStatus("Изменение скорости...");

                BufWr = new byte[5] { 0x42, 0, 0xC2, 1, 0 };

                portModel.WriteAndRead(BufWr, 20, this, 20, false);
                
                portModel.BaudRate = 115200;

                // Проверяем обмен на новой скорости
                portModel.WriteAndRead(BufWr, 20, this, 20, false);

                if (cancelTok.IsCancellationRequested) return;
                if (count <= 0)
                {
                    throw new Exception("Не удалось установить скорость обмена.\nНет ответа от МК");
                }
                else if ((count != 1) || (data[0] != BufWr[0]))
                {
                    throw new Exception("Не удалось установить скорость обмена.\nПолучен неверный ответ от МК");
                }

                //------------------------------| ЗАПИСЬ ЗАГРУЗЧИКА В ОЗУ |------------------------------//

                ProgressWindow.SetStatus("Запись загрузчика...");

                BufWr = new byte[1024 + 9];

                BufWr[0] = 0x4C;    // Код команды

                BufWr[3] = 0;       // Старшие 16 разрядов адреса
                BufWr[4] = 0x20;

                BufWr[5] = 0;       // Размер массива - 1024 байт
                BufWr[6] = 0x04;
                BufWr[7] = 0;
                BufWr[8] = 0;

                for (int addr = 0; addr < loader.Length; addr += 1024 )
                {
                    // Младшие 16 разрядов адреса
                    BufWr[1] = (byte)addr;
                    BufWr[2] = (byte)(addr >> 8);

                    int i;
                    for (i = 0; (i < 1024) && (addr + i < loader.Length); ++i)
                    {
                        BufWr[9 + i] = loader[addr + i];
                    }
                    for (; i < 1024; ++i)
                    {
                        BufWr[9 + i] = 0xFF;
                    }
                    portModel.WriteAndRead(BufWr, 50, this, 100, false);

                    if (cancelTok.IsCancellationRequested) return;
                    if (count <= 0)
                    {
                        throw new Exception("Не удалось записать загрузчик.\nНет ответа от МК");
                    }
                    else if ((count != 2) || (data[0] != 0x4C) || (data[1] != 0x4B))
                    {
                        throw new Exception("Не удалось записать загрузчик.\nПолучен неверный ответ от МК");
                    }
                }

                //------------------------------| ЗАПУСК ПРОГРАММЫ ИЗ ОЗУ |------------------------------//

                ProgressWindow.SetStatus("Запуск загрузчика...");

                BufWr = new byte[5] { 0x52, 0, 0, 0, 0x20 };

                portModel.WriteAndRead(BufWr, 200, this, 0, false);

                if (cancelTok.IsCancellationRequested) return;
                if (count <= 0)
                {
                    throw new Exception("Не удалось запустить загрузчик.\nНет ответа от МК");
                }
                else if ((count != 1) || (data[0] != BufWr[0]))
                {
                    throw new Exception("Не удалось запустить загрузчик.\nПолучен неверный ответ от МК");
                }

                //------------------------------| СТИРАНИЕ ПАМЯТИ |------------------------------//

                ProgressWindow.SetStatus("Стирание памяти...");

                BufWr = new byte[1] { 0x43 };

                portModel.WriteAndRead(BufWr, 50, this, 400, false);

                if (cancelTok.IsCancellationRequested) return;
                if (count <= 0)
                {
                    throw new Exception("Не удалось стереть память.\nНет ответа от МК");
                }
                else if ((count != 2) || (data[0] != 0x43) || (data[1] != 0x4B))
                {
                    throw new Exception("Не удалось стереть память.\nПолучен неверный ответ от МК");
                }

                //------------------------------| ЗАПИСЬ ПРОГРАММЫ |------------------------------//

                ProgressWindow.SetStatus("Запись программы...");

                BufWr = new byte[1024 + 9];

                BufWr[0] = 0x4C;    // Код команды

                BufWr[4] = 0x08;    // Старшие 8 разрядов адреса

                BufWr[5] = 0;       // Размер массива - 1024 байт
                BufWr[6] = 0x04;
                BufWr[7] = 0;
                BufWr[8] = 0;

                for (int addr = 0; addr < progData.Count * 16; addr += 1024)
                {
                    // Младшие 24 разряда адреса
                    BufWr[1] = (byte)addr;
                    BufWr[2] = (byte)(addr >> 8);
                    BufWr[3] = (byte)(addr >> 16);

                    int i;
                    bool nonzero = false;
                    for (i = 0; (i < 1024 / 16) && ((addr >> 4) + i < progData.Count); ++i)
                    {
                        for(int j = 0; j < 16; ++j)
                        {
                            byte nextByte = progData[(addr >> 4) + i][j];
                            BufWr[9 + i * 16 + j] = nextByte;
                            if (nextByte != 0xFF) { nonzero = true; }
                        }
                    }
                    if (!nonzero) continue;
                    for (; i < (1024 / 16); ++i)
                    {
                        for (int j = 0; j < 16; ++j)
                        {
                            BufWr[9 + i * 16 + j] = 0xFF;
                        }
                    }
                    portModel.WriteAndRead(BufWr, 50, this, 100, false);

                    if (cancelTok.IsCancellationRequested) return;
                    if (count <= 0)
                    {
                        throw new Exception("Не удалось записать данные.\nНет ответа от МК");
                    }
                    else if ((count != 2) || (data[0] != 0x4C) || (data[1] != 0x4B))
                    {
                        throw new Exception("Не удалось записать данные.\nПолучен неверный ответ от МК");
                    }
                }

                //------------------------------| ВЕРИФИКАЦИЯ |------------------------------//

                ProgressWindow.SetStatus("Верификация...");

                string vfy_result = null;

                BufWr = new byte[9];

                BufWr[0] = 0x59;    // Код команды

                BufWr[4] = 0x08;    // Старшие 8 разрядов адреса

                BufWr[5] = 0;       // Размер массива - 1024 байт
                BufWr[6] = 0x04;
                BufWr[7] = 0;
                BufWr[8] = 0;

                for (int addr = 0; addr < progData.Count * 16; addr += 1024)
                {
                    // Младшие 24 разряда адреса
                    BufWr[1] = (byte)addr;
                    BufWr[2] = (byte)(addr >> 8);
                    BufWr[3] = (byte)(addr >> 16);

                    // Проверяем, есть ли в блоке байты отличные от 0xFF
                    int i;
                    bool nonzero = false;
                    for (i = 0; (i < 1024 / 16) && ((addr >> 4) + i < progData.Count); ++i)
                    {
                        for (int j = 0; j < 16; ++j)
                        {
                            if (progData[(addr >> 4) + i][j] != 0xFF)
                            {
                                nonzero = true;
                                break;
                            }
                        }
                        if (nonzero) { break; }
                    }
                    if (!nonzero) continue;

                    portModel.WriteAndRead(BufWr, 50, this, 100, false);

                    if (cancelTok.IsCancellationRequested) return;
                    if (count <= 0)
                    {
                        throw new Exception("Не удалось прочитать данные.\nНет ответа от МК");
                    }
                    else if ((count != 1026) || (data[0] != 0x59) || (data[1025] != 0x4B))
                    {
                        throw new Exception("Не удалось прочитать данные.\nПолучен неверный ответ от МК");
                    }

                    for (i = 0; (i < 1024 / 16) && ((addr >> 4) + i < progData.Count); ++i)
                    {
                        for (int j = 0; j < 16; ++j)
                        {
                            byte v1 = data[1 + i * 16 + j];
                            byte v2 = progData[(addr >> 4) + i][j];
                            if (data[1 + i * 16 + j] != progData[(addr >> 4) + i][j])
                            {
                                if (vfy_result == null) { vfy_result = "Ошибка верификации по адресам:\n"; }
                                if (vfy_result.Length < 200) { vfy_result += String.Format("0x08{0:X6}\n", addr + i * 16 + j); }
                            }
                        }
                    }
                }

                if (vfy_result != null)
                {
                    if (vfy_result.Length >= 200) { vfy_result += "..."; }
                    throw new Exception(vfy_result);
                }

                //------------------------------| ЗАПУСК ПРОГРАММЫ ИЗ ОЗУ |------------------------------//

                ProgressWindow.SetStatus("Запуск программы...");

                BufWr = new byte[5] { (byte)'E', (byte)'X', (byte)'I', (byte)'T', 0 };

                portModel.WriteAndRead(BufWr, 20, this, 20, false);

                if (cancelTok.IsCancellationRequested) return;
                if (count <= 0)
                {
                    throw new Exception("Не удалось запустить программу.\nНет ответа от МК");
                }
                else if (count >= 5)
                {
                    if ((data[0] != BufWr[0]) || (data[1] != BufWr[1]) || (data[2] != BufWr[2]) || (data[3] != BufWr[3]) || (data[4] != BufWr[4]))
                    {
                        throw new Exception("Не удалось запустить программу.\nПолучен неверный ответ от МК");
                    }

                    ProgressWindow.CloseProgressWnd();

                    if(count == 5)
                    {
                        wnd.Dispatcher.BeginInvoke(new Action(() =>
                        {
                            System.Windows.MessageBox.Show(wnd, "Перепрограммирование МК успешно выполнено.\nРабочая программа запущена", "Сообщение", MessageBoxButton.OK, MessageBoxImage.Information);
                        }));
                    }
                    else
                    {
                        string retData = "";
                        for (int i = 0; i < count - 5; ++i)
                        {
                            retData += String.Format("{0:X2} ", data[i + 5]);
                        }
                        wnd.Dispatcher.BeginInvoke(new Action(() =>
                        {
                            System.Windows.MessageBox.Show(wnd, "Перепрограммирование МК успешно выполнено.\nПризапуске рабочей программы получены данные:\n" + retData, "Сообщение", MessageBoxButton.OK, MessageBoxImage.Information);
                        }));
                    }
                }
                else
                {
                    throw new Exception("Не удалось запустить программу.\nПолучен неверный ответ от МК");
                }
            }
            catch (Exception ex)
            {
                ProgressWindow.CloseProgressWnd();
                ShowErrorWnd(ex.Message);
            }
            finally
            {
                try
                {
                    ProgressWindow.CloseProgressWnd();
                    task = null;
                    tokenSrc = null;
                    portModel.BaudRate = baudRate;
                }
                catch { }
            }
        }

        public void DataReceived(byte[] data, int count)
        {
            this.data = data;
            this.count = count;
        }

        private void ShowErrorWnd(string message)
        {
            wnd.Dispatcher.BeginInvoke(new Action(() =>
            {
                System.Windows.MessageBox.Show(wnd, message, "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
            }));
        }

        private const uint fclk = 12000000;
        private readonly byte[] loader = 
        {
            0xB0, 0x45, 0x00, 0x20, 0xE1, 0x0B, 0x00, 0x20, 0x15, 0x0B, 0x00, 0x20, 0x17, 0x0B, 0x00, 0x20,
            0x19, 0x0B, 0x00, 0x20, 0x1B, 0x0B, 0x00, 0x20, 0x1D, 0x0B, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x0B, 0x00, 0x20,
            0x21, 0x0B, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x23, 0x0B, 0x00, 0x20, 0x25, 0x0B, 0x00, 0x20,
            0x27, 0x0B, 0x00, 0x20, 0x29, 0x0B, 0x00, 0x20, 0x2B, 0x0B, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x2D, 0x0B, 0x00, 0x20, 0x2F, 0x0B, 0x00, 0x20, 0x31, 0x0B, 0x00, 0x20,
            0x33, 0x0B, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x35, 0x0B, 0x00, 0x20, 0x37, 0x0B, 0x00, 0x20,
            0x39, 0x0B, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x0B, 0x00, 0x20, 0x3D, 0x0B, 0x00, 0x20,
            0x3F, 0x0B, 0x00, 0x20, 0x41, 0x0B, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x43, 0x0B, 0x00, 0x20,
            0x45, 0x0B, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x0B, 0x00, 0x20,
            0x49, 0x0B, 0x00, 0x20, 0x4B, 0x0B, 0x00, 0x20, 0x4D, 0x0B, 0x00, 0x20, 0x4F, 0x0B, 0x00, 0x20,
            unchecked((byte)fclk), unchecked((byte)(fclk >> 8)), unchecked((byte)(fclk >> 16)), unchecked((byte)(fclk >> 24)),
                                    0xDF, 0xF8, 0x48, 0x04, 0x81, 0x69, 0x89, 0x06, 0xFC, 0xD4, 0x0D, 0x21,
            0x01, 0x60, 0x81, 0x69, 0x89, 0x06, 0xFC, 0xD4, 0x0A, 0x21, 0x01, 0x60, 0x81, 0x69, 0x89, 0x06,
            0xFC, 0xD4, 0x3E, 0x21, 0x01, 0x60, 0x70, 0x47, 0x10, 0xB5, 0xDF, 0xF8, 0x24, 0x44, 0xA0, 0x69,
            0x80, 0x06, 0xFC, 0xD4, 0x43, 0x20, 0x20, 0x60, 0x03, 0xF0, 0x82, 0xFF, 0xA0, 0x69, 0x80, 0x06,
            0xFC, 0xD4, 0x4B, 0x20, 0x20, 0x60, 0x10, 0xBD, 0x30, 0xB5, 0x83, 0xB0, 0xDF, 0xF8, 0x04, 0x44,
            0x00, 0x20, 0x20, 0x60, 0xDF, 0xF8, 0x00, 0x04, 0x00, 0x68, 0x4F, 0xF4, 0x7A, 0x71, 0xB0, 0xFB,
            0xF1, 0xF0, 0x60, 0x60, 0x00, 0x20, 0xA0, 0x60, 0x05, 0x20, 0x20, 0x60, 0xDF, 0xF8, 0xE0, 0x53,
            0xA8, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x4C, 0x20, 0x28, 0x60, 0xA8, 0x69, 0xC0, 0x06, 0x07, 0xD5,
            0x20, 0x68, 0xC0, 0x03, 0xF9, 0xD5, 0xA8, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0xB2, 0xE0,
            0x28, 0x68, 0x8D, 0xF8, 0x04, 0x00, 0xA8, 0x69, 0xC0, 0x06, 0x07, 0xD5, 0x20, 0x68, 0xC0, 0x03,
            0xF9, 0xD5, 0xA8, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0xA4, 0xE0, 0x28, 0x68, 0x8D, 0xF8,
            0x05, 0x00, 0xA8, 0x69, 0xC0, 0x06, 0x07, 0xD5, 0x20, 0x68, 0xC0, 0x03, 0xF9, 0xD5, 0xA8, 0x69,
            0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0x96, 0xE0, 0x28, 0x68, 0x8D, 0xF8, 0x06, 0x00, 0xA8, 0x69,
            0xC0, 0x06, 0x07, 0xD5, 0x20, 0x68, 0xC0, 0x03, 0xF9, 0xD5, 0xA8, 0x69, 0x80, 0x06, 0xFC, 0xD4,
            0x64, 0x20, 0x88, 0xE0, 0x28, 0x68, 0x8D, 0xF8, 0x07, 0x00, 0xA8, 0x69, 0xC0, 0x06, 0x07, 0xD5,
            0x20, 0x68, 0xC0, 0x03, 0xF9, 0xD5, 0xA8, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0x7A, 0xE0,
            0x28, 0x68, 0x8D, 0xF8, 0x00, 0x00, 0xA8, 0x69, 0xC0, 0x06, 0x07, 0xD5, 0x20, 0x68, 0xC0, 0x03,
            0xF9, 0xD5, 0xA8, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0x6C, 0xE0, 0x28, 0x68, 0x8D, 0xF8,
            0x01, 0x00, 0xA8, 0x69, 0xC0, 0x06, 0x07, 0xD5, 0x20, 0x68, 0xC0, 0x03, 0xF9, 0xD5, 0xA8, 0x69,
            0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0x5E, 0xE0, 0x28, 0x68, 0x8D, 0xF8, 0x02, 0x00, 0xA8, 0x69,
            0xC0, 0x06, 0x07, 0xD5, 0x20, 0x68, 0xC0, 0x03, 0xF9, 0xD5, 0xA8, 0x69, 0x80, 0x06, 0xFC, 0xD4,
            0x64, 0x20, 0x50, 0xE0, 0x28, 0x68, 0x8D, 0xF8, 0x03, 0x00, 0x00, 0x98, 0x00, 0x28, 0x46, 0xD0,
            0x00, 0x20, 0xA0, 0x60, 0xA8, 0x69, 0xC0, 0x06, 0x07, 0xD5, 0x20, 0x68, 0xC0, 0x03, 0xF9, 0xD5,
            0xA8, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0x3D, 0xE0, 0x28, 0x68, 0x8D, 0xF8, 0x08, 0x00,
            0xA8, 0x69, 0xC0, 0x06, 0x07, 0xD5, 0x20, 0x68, 0xC0, 0x03, 0xF9, 0xD5, 0xA8, 0x69, 0x80, 0x06,
            0xFC, 0xD4, 0x64, 0x20, 0x2F, 0xE0, 0x28, 0x68, 0x8D, 0xF8, 0x09, 0x00, 0xA8, 0x69, 0xC0, 0x06,
            0x07, 0xD5, 0x20, 0x68, 0xC0, 0x03, 0xF9, 0xD5, 0xA8, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20,
            0x21, 0xE0, 0x28, 0x68, 0x8D, 0xF8, 0x0A, 0x00, 0xA8, 0x69, 0xC0, 0x06, 0x07, 0xD5, 0x20, 0x68,
            0xC0, 0x03, 0xF9, 0xD5, 0xA8, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0x13, 0xE0, 0x28, 0x68,
            0x8D, 0xF8, 0x0B, 0x00, 0x02, 0x99, 0x01, 0x98, 0x03, 0xF0, 0xFC, 0xFE, 0x00, 0x98, 0x00, 0x1F,
            0x00, 0x90, 0x01, 0x98, 0x00, 0x1D, 0x01, 0x90, 0x00, 0x98, 0x00, 0x28, 0xB8, 0xD1, 0xA8, 0x69,
            0x80, 0x06, 0xFC, 0xD4, 0x4B, 0x20, 0x28, 0x60, 0x03, 0xB0, 0x30, 0xBD, 0x10, 0xB5, 0x82, 0xB0,
            0x94, 0x48, 0x00, 0x21, 0x01, 0x60, 0x94, 0x49, 0x09, 0x68, 0x4F, 0xF4, 0x7A, 0x72, 0xB1, 0xFB,
            0xF2, 0xF1, 0x41, 0x60, 0x00, 0x21, 0x81, 0x60, 0x05, 0x21, 0x01, 0x60, 0x8C, 0x4C, 0xA1, 0x69,
            0x89, 0x06, 0xFC, 0xD4, 0x59, 0x21, 0x21, 0x60, 0xA1, 0x69, 0xC9, 0x06, 0x07, 0xD5, 0x01, 0x68,
            0xC9, 0x03, 0xF9, 0xD5, 0xA0, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0x8C, 0xE0, 0x21, 0x68,
            0x8D, 0xF8, 0x04, 0x10, 0xA1, 0x69, 0xC9, 0x06, 0x07, 0xD5, 0x01, 0x68, 0xC9, 0x03, 0xF9, 0xD5,
            0xA0, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0x7E, 0xE0, 0x21, 0x68, 0x8D, 0xF8, 0x05, 0x10,
            0xA1, 0x69, 0xC9, 0x06, 0x07, 0xD5, 0x01, 0x68, 0xC9, 0x03, 0xF9, 0xD5, 0xA0, 0x69, 0x80, 0x06,
            0xFC, 0xD4, 0x64, 0x20, 0x70, 0xE0, 0x21, 0x68, 0x8D, 0xF8, 0x06, 0x10, 0xA1, 0x69, 0xC9, 0x06,
            0x07, 0xD5, 0x01, 0x68, 0xC9, 0x03, 0xF9, 0xD5, 0xA0, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20,
            0x62, 0xE0, 0x21, 0x68, 0x8D, 0xF8, 0x07, 0x10, 0xA1, 0x69, 0xC9, 0x06, 0x07, 0xD5, 0x01, 0x68,
            0xC9, 0x03, 0xF9, 0xD5, 0xA0, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0x54, 0xE0, 0x21, 0x68,
            0x8D, 0xF8, 0x00, 0x10, 0xA1, 0x69, 0xC9, 0x06, 0x07, 0xD5, 0x01, 0x68, 0xC9, 0x03, 0xF9, 0xD5,
            0xA0, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0x46, 0xE0, 0x21, 0x68, 0x8D, 0xF8, 0x01, 0x10,
            0xA1, 0x69, 0xC9, 0x06, 0x07, 0xD5, 0x01, 0x68, 0xC9, 0x03, 0xF9, 0xD5, 0xA0, 0x69, 0x80, 0x06,
            0xFC, 0xD4, 0x64, 0x20, 0x38, 0xE0, 0x21, 0x68, 0x8D, 0xF8, 0x02, 0x10, 0xA1, 0x69, 0xC9, 0x06,
            0x07, 0xD5, 0x01, 0x68, 0xC9, 0x03, 0xF9, 0xD5, 0xA0, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20,
            0x2A, 0xE0, 0x20, 0x68, 0x8D, 0xF8, 0x03, 0x00, 0x00, 0x98, 0x08, 0xB3, 0x01, 0x98, 0x03, 0xF0,
            0xB2, 0xFE, 0x00, 0x99, 0x09, 0x1F, 0x00, 0x91, 0x01, 0x99, 0x09, 0x1D, 0x01, 0x91, 0xA1, 0x69,
            0x89, 0x06, 0xFC, 0xD4, 0xC1, 0xB2, 0x21, 0x60, 0xA1, 0x69, 0x89, 0x06, 0xFC, 0xD4, 0xC0, 0xF3,
            0x07, 0x21, 0x21, 0x60, 0xA1, 0x69, 0x89, 0x06, 0xFC, 0xD4, 0xC0, 0xF3, 0x07, 0x41, 0x21, 0x60,
            0xA1, 0x69, 0x89, 0x06, 0xFC, 0xD4, 0x00, 0x0E, 0x20, 0x60, 0x00, 0x98, 0x00, 0x28, 0xDD, 0xD1,
            0xA0, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x4B, 0x20, 0x20, 0x60, 0x02, 0xB0, 0x10, 0xBD, 0x81, 0xB0,
            0x3C, 0x48, 0x00, 0x21, 0x01, 0x60, 0x3C, 0x49, 0x09, 0x68, 0x4F, 0xF4, 0x7A, 0x72, 0xB1, 0xFB,
            0xF2, 0xF1, 0x41, 0x60, 0x00, 0x21, 0x81, 0x60, 0x05, 0x21, 0x01, 0x60, 0x34, 0x49, 0x8A, 0x69,
            0x92, 0x06, 0xFC, 0xD4, 0x45, 0x22, 0x0A, 0x60, 0x8A, 0x69, 0xD2, 0x06, 0x09, 0xD5, 0x02, 0x68,
            0xD2, 0x03, 0xF9, 0xD5, 0x88, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x64, 0x20, 0x08, 0x60, 0x01, 0xB0,
            0x70, 0x47, 0x0A, 0x68, 0x8D, 0xF8, 0x00, 0x20, 0x8A, 0x69, 0xD2, 0x06, 0x03, 0xD5, 0x02, 0x68,
            0xD2, 0x03, 0xF9, 0xD5, 0xEE, 0xE7, 0x00, 0xAA, 0x0B, 0x68, 0x53, 0x70, 0x8B, 0x69, 0xDB, 0x06,
            0x03, 0xD5, 0x03, 0x68, 0xDB, 0x03, 0xF9, 0xD5, 0xE4, 0xE7, 0x0B, 0x68, 0x93, 0x70, 0x8B, 0x69,
            0xDB, 0x06, 0x03, 0xD5, 0x03, 0x68, 0xDB, 0x03, 0xF9, 0xD5, 0xDB, 0xE7, 0x08, 0x68, 0xD0, 0x70,
            0x9D, 0xF8, 0x00, 0x00, 0x58, 0x28, 0x01, 0xBF, 0x50, 0x78, 0x49, 0x28, 0x90, 0x78, 0x54, 0x28,
            0x29, 0xD1, 0x8B, 0x69, 0x9B, 0x06, 0xFC, 0xD4, 0x58, 0x23, 0x0B, 0x60, 0x8B, 0x69, 0x9B, 0x06,
            0xFC, 0xD4, 0x49, 0x23, 0x0B, 0x60, 0x8B, 0x69, 0x9B, 0x06, 0xFC, 0xD4, 0x08, 0x60, 0x88, 0x69,
            0x80, 0x06, 0xFC, 0xD4, 0xD0, 0x78, 0x08, 0x60, 0x8A, 0x69, 0x12, 0x07, 0xFC, 0xD4, 0x08, 0x28,
            0x06, 0xD2, 0x0E, 0x49, 0x00, 0x03, 0x00, 0x0B, 0x0A, 0x68, 0x60, 0xF3, 0x0E, 0x32, 0x0A, 0x60,
            0x0B, 0x48, 0x01, 0x68, 0x41, 0xF4, 0x80, 0x51, 0x01, 0x60, 0x0A, 0x48, 0x40, 0x21, 0x41, 0x60,
            0xFF, 0x21, 0x01, 0x60, 0xFE, 0xE7, 0x88, 0x69, 0x80, 0x06, 0xFC, 0xD4, 0x63, 0x20, 0xA5, 0xE7,
            0x00, 0x80, 0x03, 0x40, 0x10, 0xE0, 0x00, 0xE0, 0xA8, 0x41, 0x00, 0x20, 0x38, 0x80, 0x0D, 0x40,
            0x1C, 0x00, 0x02, 0x40, 0x00, 0x00, 0x06, 0x40, 0x70, 0xB5, 0x53, 0x48, 0x4F, 0xF0, 0xFF, 0x31,
            0xC0, 0xF8, 0x00, 0x11, 0x01, 0x60, 0x51, 0x4C, 0x51, 0x4D, 0xE0, 0x69, 0x28, 0x43, 0xE0, 0x61,
            0x50, 0x48, 0x00, 0x68, 0x50, 0x49, 0x28, 0xB9, 0x50, 0x4E, 0xF1, 0x61, 0x01, 0x20, 0xB0, 0x61,
            0xE0, 0x68, 0x22, 0xE0, 0xB1, 0xFB, 0xF0, 0xF2, 0x00, 0xFB, 0x12, 0x11, 0x01, 0xB1, 0x52, 0x1C,
            0x4A, 0x4E, 0xB2, 0x61, 0x11, 0x46, 0x11, 0x29, 0x00, 0xD2, 0x01, 0xB9, 0xFE, 0xE7, 0x48, 0x43,
            0xF0, 0x61, 0xC0, 0x00, 0x4F, 0xF4, 0xE1, 0x31, 0xB0, 0xFB, 0xF1, 0xF0, 0x40, 0x1C, 0x44, 0x4E,
            0xC1, 0x09, 0x71, 0x62, 0xC0, 0xF3, 0x45, 0x00, 0xB0, 0x62, 0xA0, 0x68, 0x40, 0xF0, 0x01, 0x00,
            0xA0, 0x60, 0x20, 0x68, 0xE0, 0x68, 0x40, 0xF0, 0x02, 0x00, 0xE0, 0x60, 0x3B, 0x4E, 0x60, 0x68,
            0xB1, 0x69, 0x49, 0x1E, 0x09, 0x02, 0x41, 0xF0, 0x04, 0x01, 0x08, 0x43, 0x60, 0x60, 0x20, 0x68,
            0xE0, 0x68, 0xE0, 0x60, 0xE0, 0x68, 0x40, 0xF0, 0x04, 0x00, 0xE0, 0x60, 0xE0, 0x68, 0x4F, 0xF4,
            0x80, 0x71, 0x08, 0x43, 0xE0, 0x60, 0x01, 0x20, 0x00, 0xF0, 0x64, 0xF8, 0x30, 0x60, 0x05, 0x20,
            0x00, 0xF0, 0x60, 0xF8, 0x70, 0x60, 0x0A, 0x20, 0x00, 0xF0, 0x5C, 0xF8, 0xB0, 0x60, 0x28, 0x20,
            0x00, 0xF0, 0x58, 0xF8, 0xF0, 0x60, 0x64, 0x20, 0x00, 0xF0, 0x54, 0xF8, 0x30, 0x61, 0x49, 0xF6,
            0x40, 0x40, 0x00, 0xF0, 0x4F, 0xF8, 0x70, 0x61, 0xE0, 0x69, 0x28, 0x43, 0xE0, 0x61, 0xA0, 0x6A,
            0x40, 0xF0, 0x00, 0x70, 0xA0, 0x62, 0x22, 0x4E, 0xF0, 0x6A, 0x40, 0xF0, 0x70, 0x00, 0xF0, 0x62,
            0x30, 0x6B, 0x4F, 0xF4, 0x40, 0x71, 0x08, 0x43, 0x30, 0x63, 0x24, 0x20, 0x70, 0x63, 0xB0, 0x6C,
            0x40, 0xF0, 0x07, 0x00, 0xB0, 0x64, 0x30, 0x6B, 0x40, 0xF0, 0x01, 0x00, 0x30, 0x63, 0x01, 0xE0,
            0xFF, 0xF7, 0x48, 0xFD, 0xB0, 0x69, 0xC0, 0x06, 0xFC, 0xD4, 0x30, 0x68, 0xC0, 0xB2, 0x00, 0x28,
            0xF6, 0xD0, 0x43, 0x28, 0x02, 0xD1, 0xFF, 0xF7, 0x4F, 0xFD, 0xF3, 0xE7, 0x4C, 0x28, 0x02, 0xD1,
            0xFF, 0xF7, 0x5A, 0xFD, 0xEE, 0xE7, 0x59, 0x28, 0x02, 0xD1, 0xFF, 0xF7, 0x2F, 0xFE, 0xE9, 0xE7,
            0x45, 0x28, 0x02, 0xD1, 0xFF, 0xF7, 0xDB, 0xFE, 0xE4, 0xE7, 0xB0, 0x69, 0x80, 0x06, 0xFC, 0xD4,
            0x63, 0x20, 0x30, 0x60, 0xDE, 0xE7, 0x00, 0xBF, 0x80, 0xE1, 0x00, 0xE0, 0x00, 0x00, 0x02, 0x40,
            0x88, 0x00, 0x00, 0x21, 0xC0, 0x00, 0x00, 0x20, 0x00, 0x12, 0x7A, 0x00, 0x8C, 0x41, 0x00, 0x20,
            0x00, 0x80, 0x03, 0x40, 0x10, 0xB5, 0x00, 0xF0, 0x19, 0xF8, 0x04, 0x46, 0x08, 0x48, 0x00, 0x68,
            0x00, 0xF0, 0x14, 0xF8, 0x21, 0x46, 0x00, 0xF0, 0x37, 0xF8, 0x06, 0x49, 0x00, 0xF0, 0xA0, 0xF8,
            0x05, 0x49, 0x00, 0xF0, 0xDF, 0xF8, 0xBD, 0xE8, 0x10, 0x40, 0x00, 0xF0, 0x59, 0xB9, 0x00, 0xBF,
            0xA8, 0x41, 0x00, 0x20, 0x00, 0x24, 0x74, 0x4A, 0x00, 0x24, 0xF4, 0x4A, 0x00, 0x28, 0x00, 0xBF,
            0x0A, 0xD0, 0xB0, 0xFA, 0x80, 0xF1, 0x88, 0x40, 0xD1, 0xF1, 0x9D, 0x01, 0xC9, 0x05, 0x02, 0x06,
            0x72, 0xF1, 0x00, 0x42, 0x41, 0xEB, 0x10, 0x20, 0x70, 0x47, 0x10, 0xB4, 0x50, 0xF8, 0x04, 0x1B,
            0x81, 0xB1, 0x02, 0x68, 0x12, 0x18, 0x00, 0x1D, 0x50, 0xF8, 0x04, 0x3B, 0xDC, 0x07, 0x44, 0xBF,
            0xA9, 0xF1, 0x01, 0x04, 0xE3, 0x18, 0x52, 0xF8, 0x04, 0x4B, 0x43, 0xF8, 0x04, 0x4B, 0x09, 0x1F,
            0xF9, 0xD1, 0xEB, 0xE7, 0x10, 0xBC, 0x70, 0x47, 0xFF, 0x22, 0x12, 0xEA, 0xD0, 0x5C, 0x1D, 0xBF,
            0x12, 0xEA, 0xD1, 0x53, 0x94, 0x45, 0x93, 0x42, 0x2B, 0xE0, 0x9C, 0x44, 0xD3, 0x07, 0x80, 0xEA,
            0x01, 0x02, 0x1A, 0x40, 0x43, 0xEA, 0x00, 0x20, 0x43, 0xEA, 0x01, 0x21, 0xA1, 0xFB, 0x00, 0x30,
            0x41, 0x00, 0x38, 0xBF, 0x40, 0x00, 0x7C, 0xF1, 0x7F, 0x01, 0x0B, 0xDB, 0xFE, 0x29, 0x4A, 0xDA,
            0x5B, 0x08, 0x42, 0xEA, 0xC1, 0x51, 0x53, 0xEA, 0x00, 0x63, 0x73, 0xF1, 0x00, 0x4C, 0x51, 0xEB,
            0x10, 0x20, 0x70, 0x47, 0xD1, 0xF1, 0x08, 0x0C, 0xDC, 0xF1, 0x20, 0x01, 0x2F, 0xDB, 0x5B, 0x08,
            0x10, 0xFA, 0x01, 0xF1, 0x0B, 0x43, 0x73, 0xF1, 0x00, 0x41, 0x20, 0xFA, 0x0C, 0xF0, 0x50, 0x41,
            0x70, 0x47, 0x94, 0x45, 0x1C, 0xBF, 0x02, 0xEA, 0xD1, 0x53, 0x93, 0x42, 0x80, 0xEA, 0x01, 0x02,
            0x02, 0xF0, 0x00, 0x42, 0x1D, 0xD0, 0x40, 0x00, 0x19, 0xD0, 0x49, 0x00, 0x17, 0xD0, 0x5B, 0xB9,
            0x63, 0x45, 0x14, 0xD0, 0x09, 0x02, 0xB1, 0xFA, 0x81, 0xF3, 0x99, 0x40, 0xBC, 0xEB, 0x03, 0x0C,
            0xC0, 0x01, 0x40, 0xF0, 0x00, 0x40, 0xC1, 0xE7, 0x00, 0x02, 0xB0, 0xFA, 0x80, 0xFC, 0x10, 0xFA,
            0x0C, 0xF0, 0xB3, 0xEB, 0x0C, 0x0C, 0xC9, 0x01, 0x41, 0xF0, 0x00, 0x41, 0xB6, 0xE7, 0x10, 0x00,
            0x70, 0x47, 0x40, 0x00, 0x0A, 0xD0, 0x49, 0x00, 0x08, 0xD0, 0x10, 0xF1, 0x80, 0x7F, 0x94, 0xBF,
            0x11, 0xF1, 0x80, 0x7F, 0x02, 0xE0, 0x42, 0xF0, 0xFF, 0x40, 0x70, 0x47, 0xD0, 0x43, 0x70, 0x47,
            0x90, 0xEA, 0x01, 0x0F, 0x44, 0xBF, 0x81, 0xF0, 0x00, 0x41, 0x00, 0xF0, 0xCB, 0xB8, 0x00, 0xBF,
            0x42, 0x1A, 0x3C, 0xBF, 0x80, 0x1A, 0x89, 0x18, 0x4F, 0xF0, 0x00, 0x4C, 0xC0, 0xF3, 0xC7, 0x52,
            0xFF, 0x2A, 0x24, 0xD0, 0xC1, 0xF3, 0xC7, 0x53, 0x13, 0xB3, 0xD2, 0x1A, 0xD2, 0xF1, 0x19, 0x03,
            0x27, 0xDD, 0x4C, 0xEA, 0x01, 0x21, 0x4C, 0xFA, 0x03, 0xF3, 0x21, 0xEA, 0x03, 0x03, 0xD1, 0x40,
            0xC2, 0x0D, 0x4C, 0xEA, 0x00, 0x20, 0x40, 0x18, 0x34, 0xBF, 0x20, 0xEA, 0x0C, 0x00, 0x4C, 0xEA,
            0x50, 0x00, 0xD2, 0x05, 0x53, 0xEA, 0x00, 0x63, 0x73, 0xEB, 0x0C, 0x0C, 0x52, 0xEB, 0x10, 0x20,
            0x42, 0x00, 0x12, 0xF1, 0x80, 0x7F, 0x38, 0xBF, 0x70, 0x47, 0xC0, 0x0D, 0xC0, 0x05, 0x70, 0x47,
            0x49, 0x02, 0x12, 0xBF, 0x9A, 0x42, 0x00, 0xEB, 0x51, 0x20, 0xF8, 0xE7, 0xD2, 0xF1, 0x17, 0x03,
            0xD9, 0xD5, 0x70, 0x47, 0x10, 0xB5, 0xFF, 0x23, 0x13, 0xEA, 0xD0, 0x54, 0x1D, 0xBF, 0x13, 0xEA,
            0xD1, 0x52, 0x9C, 0x42, 0x9A, 0x42, 0x39, 0xE0, 0xA4, 0x1A, 0xDA, 0x07, 0x80, 0xEA, 0x01, 0x03,
            0x13, 0x40, 0x42, 0xEA, 0x01, 0x21, 0x42, 0xEA, 0x00, 0x20, 0x42, 0x1A, 0x3C, 0xBF, 0x64, 0x1E,
            0x01, 0xEB, 0x42, 0x02, 0x09, 0x0A, 0xB2, 0xFB, 0xF1, 0xFE, 0x01, 0xFB, 0x1E, 0x22, 0x12, 0x02,
            0xB2, 0xFB, 0xF1, 0xF0, 0x01, 0xFB, 0x10, 0x22, 0x6E, 0xF3, 0x0F, 0x20, 0x12, 0x02, 0xB2, 0xFB,
            0xF1, 0xFE, 0x4E, 0xEA, 0x00, 0x20, 0x7F, 0x34, 0x06, 0xDD, 0xFE, 0x2C, 0x24, 0xDA, 0x53, 0xEA,
            0x50, 0x00, 0x50, 0xEB, 0xC4, 0x50, 0x10, 0xBD, 0xD4, 0xF1, 0x02, 0x04, 0x01, 0xFB, 0x1E, 0x22,
            0x40, 0xF0, 0x80, 0x71, 0x19, 0x2C, 0x1D, 0xDC, 0x21, 0xFA, 0x04, 0xF0, 0xC4, 0xF1, 0x20, 0x04,
            0xA1, 0x40, 0x11, 0x43, 0x71, 0xF1, 0x00, 0x42, 0x58, 0x41, 0x10, 0xBD, 0x9C, 0x42, 0x1A, 0xBF,
            0x03, 0xEA, 0xD1, 0x52, 0x9A, 0x42, 0x0F, 0xE0, 0x80, 0xEA, 0x01, 0x0E, 0x0E, 0xF0, 0x00, 0x43,
            0x40, 0x00, 0x04, 0xD0, 0x49, 0x00, 0x16, 0xD1, 0x43, 0xF0, 0xFF, 0x40, 0x10, 0xBD, 0x49, 0x00,
            0x08, 0xBF, 0xD3, 0x43, 0x18, 0x00, 0x10, 0xBD, 0x9C, 0x42, 0x05, 0xD1, 0xD2, 0x1A, 0xF7, 0xD0,
            0x01, 0xF0, 0x00, 0x41, 0x48, 0x40, 0x10, 0xBD, 0x4A, 0x02, 0x12, 0xBF, 0x08, 0x46, 0x48, 0x40,
            0x00, 0xF0, 0x00, 0x40, 0x10, 0xBD, 0x4A, 0xB9, 0x09, 0x02, 0xB1, 0xFA, 0x81, 0xF2, 0x91, 0x40,
            0x44, 0xB1, 0xA4, 0x18, 0xC0, 0x01, 0x40, 0xF0, 0x00, 0x40, 0x9E, 0xE7, 0xC9, 0x01, 0x41, 0xF0,
            0x00, 0x41, 0x52, 0x42, 0x00, 0x02, 0xB0, 0xFA, 0x80, 0xF4, 0xA0, 0x40, 0x14, 0x1B, 0x94, 0xE7,
            0x40, 0x00, 0x0D, 0xD2, 0x01, 0x0E, 0x7F, 0x39, 0x0A, 0xD4, 0xD1, 0xF1, 0x1F, 0x01, 0x04, 0xD4,
            0xC0, 0x01, 0x40, 0xF0, 0x00, 0x40, 0xC8, 0x40, 0x70, 0x47, 0x7F, 0xF0, 0x00, 0x00, 0x70, 0x47,
            0x00, 0x20, 0x70, 0x47, 0x43, 0x1A, 0x4F, 0xF0, 0x00, 0x42, 0x3E, 0xBF, 0x53, 0x40, 0xC0, 0x1A,
            0xC9, 0x18, 0x00, 0xBF, 0xD3, 0x09, 0x5F, 0xEA, 0xD0, 0x5C, 0x13, 0xEB, 0x40, 0x0F, 0x34, 0xBF,
            0xB3, 0xEB, 0x41, 0x0F, 0x40, 0xE0, 0x7C, 0xEB, 0xD1, 0x53, 0x0C, 0xD3, 0x42, 0xEA, 0x01, 0x21,
            0x22, 0xD8, 0xD1, 0xEB, 0x40, 0x20, 0x09, 0xD3, 0x40, 0x0A, 0x28, 0xBF, 0x5F, 0xEA, 0x50, 0x01,
            0x40, 0xEB, 0xCC, 0x50, 0x70, 0x47, 0x40, 0x1A, 0x15, 0xD0, 0x40, 0x02, 0xB0, 0xFA, 0x80, 0xF2,
            0x52, 0x1C, 0x90, 0x40, 0x40, 0x0A, 0x4F, 0xEA, 0x3C, 0x23, 0xB3, 0xEB, 0x02, 0x63, 0x84, 0xBF,
            0x00, 0xEB, 0x73, 0x00, 0x07, 0xE0, 0x40, 0xF4, 0x00, 0x00, 0x1A, 0x16, 0xDB, 0x07, 0xC2, 0xF1,
            0x01, 0x02, 0xD0, 0x40, 0x18, 0x43, 0x70, 0x47, 0x18, 0x2B, 0xFC, 0xDC, 0x31, 0xFA, 0x03, 0xF2,
            0x02, 0xFA, 0x03, 0xF3, 0x59, 0x1A, 0x38, 0xBF, 0x42, 0xF0, 0x01, 0x02, 0xD2, 0xEB, 0x40, 0x20,
            0x3C, 0xBF, 0x40, 0x00, 0xAC, 0xF1, 0x01, 0x0C, 0x5F, 0xEA, 0xCC, 0x5C, 0xC2, 0x05, 0x72, 0xF1,
            0x00, 0x41, 0x4C, 0xEB, 0x50, 0x20, 0x70, 0x47, 0x13, 0xEB, 0x40, 0x0F, 0x0F, 0xD2, 0x4B, 0x00,
            0x09, 0xD0, 0xAC, 0xEB, 0xD1, 0x53, 0x02, 0x2B, 0x03, 0xDB, 0x49, 0x02, 0x17, 0x2B, 0xDD, 0xDD,
            0x70, 0x47, 0x91, 0x43, 0x40, 0x1A, 0x43, 0x00, 0xD5, 0xD1, 0x00, 0x20, 0x70, 0x47, 0x13, 0xEB,
            0x41, 0x0F, 0xD0, 0xD3, 0x6F, 0xF0, 0x00, 0x00, 0x70, 0x47, 0x50, 0xF8, 0x04, 0x1B, 0x61, 0xB1,
            0x50, 0xF8, 0x04, 0x2B, 0xD3, 0x07, 0x44, 0xBF, 0xA9, 0xF1, 0x01, 0x03, 0x9A, 0x18, 0x00, 0x23,
            0x42, 0xF8, 0x04, 0x3B, 0x09, 0x1F, 0xFA, 0xD1, 0xEF, 0xE7, 0x70, 0x47, 0x1C, 0x48, 0x1D, 0x49,
            0x82, 0x68, 0x0A, 0x46, 0x83, 0x68, 0xDB, 0x07, 0x48, 0xBF, 0x1B, 0x4A, 0x83, 0x68, 0x5B, 0x07,
            0x04, 0xD5, 0x03, 0x68, 0xC3, 0xF3, 0x03, 0x23, 0x5B, 0x1C, 0x5A, 0x43, 0x83, 0x68, 0x1B, 0x0A,
            0x13, 0xF0, 0x03, 0x03, 0x0E, 0xD0, 0x02, 0x2B, 0x07, 0xD0, 0x09, 0xD2, 0x80, 0x68, 0xC0, 0xF3,
            0x03, 0x10, 0x40, 0x1C, 0xB2, 0xFB, 0xF0, 0xF1, 0x04, 0xE0, 0x4F, 0xF4, 0x00, 0x41, 0x01, 0xE0,
            0x49, 0xF6, 0x40, 0x41, 0x0D, 0x48, 0x01, 0x60, 0x70, 0x47, 0x09, 0x48, 0x0C, 0x49, 0x81, 0x61,
            0x81, 0x68, 0x00, 0x21, 0x81, 0x60, 0x01, 0x68, 0x00, 0x21, 0x01, 0x60, 0x41, 0x68, 0x00, 0x21,
            0x41, 0x60, 0xC1, 0x68, 0x00, 0x21, 0xC1, 0x60, 0x01, 0x69, 0x00, 0x21, 0x01, 0x61, 0xC5, 0xE7,
            0x04, 0x00, 0x02, 0x40, 0x00, 0x12, 0x7A, 0x00, 0x00, 0x09, 0x3D, 0x00, 0x88, 0x41, 0x00, 0x20,
            0x10, 0x00, 0x00, 0x08, 0x70, 0x47, 0xFE, 0xE7, 0xFE, 0xE7, 0xFE, 0xE7, 0xFE, 0xE7, 0x70, 0x47,
            0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47,
            0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47,
            0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47,
            0x10, 0xB5, 0x08, 0x49, 0x79, 0x44, 0x1C, 0x31, 0x07, 0x4C, 0x7C, 0x44, 0x1A, 0x34, 0xA1, 0x42,
            0x06, 0xD0, 0x08, 0x1D, 0x0A, 0x68, 0x51, 0x18, 0x88, 0x47, 0x01, 0x46, 0xA1, 0x42, 0xF8, 0xD1,
            0x10, 0xBD, 0x00, 0xBF, 0x08, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xEF, 0xFE, 0xFF, 0xFF,
            0x20, 0x00, 0x00, 0x00, 0x8C, 0x41, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x5F, 0xFB, 0xFF, 0xFF,
            0x8C, 0x01, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xF0, 0x09, 0xF8, 0x00, 0x28, 0x01, 0xD0, 0xFF, 0xF7, 0xD2, 0xFF, 0x00, 0x20, 0xFF, 0xF7,
            0xBB, 0xFC, 0x00, 0xF0, 0x02, 0xF8, 0x01, 0x20, 0x70, 0x47, 0x00, 0xF0, 0x01, 0xB8, 0x00, 0x00,
            0x07, 0x46, 0x38, 0x46, 0x00, 0xF0, 0x02, 0xF8, 0xFB, 0xE7, 0x00, 0x00, 0x80, 0xB5, 0xC0, 0x46,
            0xC0, 0x46, 0x02, 0x4A, 0x11, 0x00, 0x18, 0x20, 0xAB, 0xBE, 0xFB, 0xE7, 0x26, 0x00, 0x02, 0x00,
            0x01, 0x48, 0x80, 0x47, 0x01, 0x48, 0x00, 0x47, 0xDB, 0x0A, 0x00, 0x20, 0xF1, 0x0B, 0x00, 0x20,
            0xC0, 0x46, 0xC0, 0x46, 0xC0, 0x46, 0xC0, 0x46, 0xFF, 0xF7, 0xD2, 0xFF, 0xFF, 0xF7, 0x8A, 0xBF,
            0xFF, 0xF7, 0x89, 0xBF, 0xFF, 0xF7, 0x88, 0xBF, 0xFF, 0xF7, 0x87, 0xBF, 0xFF, 0xF7, 0x86, 0xBF,
            0xFF, 0xF7, 0x85, 0xBF, 0xFF, 0xF7, 0x84, 0xBF, 0xFF, 0xF7, 0x83, 0xBF, 0xFF, 0xF7, 0x82, 0xBF,
            0xFF, 0xF7, 0x81, 0xBF, 0xFF, 0xF7, 0x80, 0xBF, 0xFF, 0xF7, 0x7F, 0xBF, 0xFF, 0xF7, 0x7E, 0xBF,
            0xFF, 0xF7, 0x7D, 0xBF, 0xFF, 0xF7, 0x7C, 0xBF, 0xFF, 0xF7, 0x7B, 0xBF, 0xFF, 0xF7, 0x7A, 0xBF,
            0xFF, 0xF7, 0x79, 0xBF, 0xFF, 0xF7, 0x78, 0xBF, 0xFF, 0xF7, 0x77, 0xBF, 0xFF, 0xF7, 0x76, 0xBF,
            0xFF, 0xF7, 0x75, 0xBF, 0xFF, 0xF7, 0x74, 0xBF, 0xFF, 0xF7, 0x73, 0xBF, 0xFF, 0xF7, 0x72, 0xBF,
            0xFF, 0xF7, 0x71, 0xBF, 0xFF, 0xF7, 0x70, 0xBF, 0xFF, 0xF7, 0x6F, 0xBF, 0xFF, 0xF7, 0x6E, 0xBF,
            0xFF, 0xF7, 0x6D, 0xBF, 0xF0, 0xB4, 0x81, 0xB0, 0x58, 0x48, 0x59, 0x49, 0x01, 0x61, 0x01, 0x68,
            0x01, 0xF0, 0x38, 0x01, 0x41, 0xF0, 0x01, 0x06, 0x06, 0x60, 0x00, 0x21, 0x55, 0x4A, 0x56, 0x4B,
            0x56, 0x4C, 0x57, 0x4D, 0x41, 0x60, 0x00, 0x27, 0x87, 0x60, 0x46, 0xF4, 0x44, 0x66, 0x06, 0x60,
            0x2F, 0x68, 0x01, 0xE0, 0x00, 0x9F, 0x7F, 0x1E, 0x00, 0x97, 0x00, 0x9F, 0x00, 0x2F, 0xF9, 0xD1,
            0x46, 0xF4, 0x00, 0x56, 0x06, 0x60, 0x27, 0x68, 0x01, 0xE0, 0x00, 0x9F, 0x7F, 0x1E, 0x00, 0x97,
            0x00, 0x9F, 0x00, 0x2F, 0xF9, 0xD1, 0x26, 0xF4, 0x80, 0x66, 0x06, 0x60, 0x1F, 0x68, 0x01, 0xE0,
            0x00, 0x9F, 0x7F, 0x1E, 0x00, 0x97, 0x00, 0x9F, 0x00, 0x2F, 0xF9, 0xD1, 0x26, 0xF4, 0x21, 0x56,
            0x06, 0x60, 0x17, 0x68, 0x01, 0xE0, 0x00, 0x9F, 0x7F, 0x1E, 0x00, 0x97, 0x00, 0x9F, 0x00, 0x2F,
            0xF9, 0xD1, 0x09, 0x1D, 0x10, 0x29, 0xCD, 0xD3, 0x06, 0xF0, 0x38, 0x01, 0x01, 0x60, 0x00, 0x21,
            0x01, 0x61, 0x01, 0xB0, 0xF0, 0xBC, 0x70, 0x47, 0x81, 0xB0, 0x34, 0x4A, 0x34, 0x4B, 0x13, 0x61,
            0x13, 0x68, 0x03, 0xF0, 0x38, 0x03, 0x43, 0xF0, 0x01, 0x03, 0x13, 0x60, 0x50, 0x60, 0x91, 0x60,
            0x43, 0xF4, 0x82, 0x51, 0x11, 0x60, 0x32, 0x48, 0x03, 0x68, 0x01, 0xE0, 0x00, 0x9B, 0x5B, 0x1E,
            0x00, 0x93, 0x00, 0x9B, 0x00, 0x2B, 0xF9, 0xD1, 0x41, 0xF4, 0x00, 0x51, 0x11, 0x60, 0x2D, 0x4B,
            0x1B, 0x68, 0x01, 0xE0, 0x00, 0x9B, 0x5B, 0x1E, 0x00, 0x93, 0x00, 0x9B, 0x00, 0x2B, 0xF9, 0xD1,
            0x41, 0xF0, 0x80, 0x01, 0x11, 0x60, 0x28, 0x4B, 0x1B, 0x68, 0x01, 0xE0, 0x00, 0x9B, 0x5B, 0x1E,
            0x00, 0x93, 0x00, 0x9B, 0x00, 0x2B, 0xF9, 0xD1, 0x21, 0xF0, 0x80, 0x01, 0x11, 0x60, 0x21, 0xF4,
            0x80, 0x51, 0x11, 0x60, 0x00, 0x68, 0x01, 0xE0, 0x00, 0x98, 0x40, 0x1E, 0x00, 0x90, 0x00, 0x98,
            0x00, 0x28, 0xF9, 0xD1, 0x21, 0xF4, 0x01, 0x50, 0x10, 0x60, 0x16, 0x49, 0x09, 0x68, 0x01, 0xE0,
            0x00, 0x99, 0x49, 0x1E, 0x00, 0x91, 0x00, 0x99, 0x00, 0x29, 0xF9, 0xD1, 0x00, 0xF0, 0x38, 0x00,
            0x10, 0x60, 0x00, 0x20, 0x10, 0x61, 0x01, 0xB0, 0x70, 0x47, 0x0C, 0x49, 0x0C, 0x4A, 0x0A, 0x61,
            0x0A, 0x68, 0x02, 0xF0, 0x38, 0x02, 0x42, 0xF0, 0x01, 0x02, 0x0A, 0x60, 0x48, 0x60, 0x4F, 0xF4,
            0xE0, 0x70, 0x10, 0x43, 0x08, 0x60, 0xC8, 0x68, 0xC8, 0x68, 0xC8, 0x68, 0xC8, 0x68, 0x02, 0xF0,
            0x38, 0x02, 0x0A, 0x60, 0x00, 0x22, 0x0A, 0x61, 0x70, 0x47, 0x00, 0x00, 0x00, 0x80, 0x01, 0x40,
            0x51, 0x55, 0xAA, 0x8A, 0x8C, 0x41, 0x00, 0x20, 0x9C, 0x41, 0x00, 0x20, 0xA0, 0x41, 0x00, 0x20,
            0x90, 0x41, 0x00, 0x20, 0x94, 0x41, 0x00, 0x20, 0x98, 0x41, 0x00, 0x20, 0x00, 0x12, 0x7A, 0x00
        };
    }
}
